// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using driveX_Api.DataBase.DBContexts;

#nullable disable

namespace driveX_Api.Migrations
{
    [DbContext(typeof(DriveXDBC))]
    partial class DriveXDBCModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("driveX_Api.Models.File.Details", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("Varchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<bool>("Starred")
                        .HasColumnType("bit");

                    b.Property<bool>("Trashed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FileDetails", (string)null);
                });

            modelBuilder.Entity("driveX_Api.Models.File.SharedDetails", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("DetailsId")
                        .HasColumnType("Varchar(100)");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "DetailsId");

                    b.HasIndex("DetailsId");

                    b.ToTable("SharedDetails", (string)null);
                });

            modelBuilder.Entity("driveX_Api.Models.File.Storage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("Varchar(100)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("FileStorages", (string)null);
                });

            modelBuilder.Entity("driveX_Api.Models.User.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("driveX_Api.Models.File.Details", b =>
                {
                    b.HasOne("driveX_Api.Models.User.UserInfo", "User")
                        .WithMany("FileDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("driveX_Api.Models.File.SharedDetails", b =>
                {
                    b.HasOne("driveX_Api.Models.File.Details", "Details")
                        .WithMany("SharedDetails")
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("driveX_Api.Models.User.UserInfo", "User")
                        .WithMany("SharedDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Details");

                    b.Navigation("User");
                });

            modelBuilder.Entity("driveX_Api.Models.File.Storage", b =>
                {
                    b.HasOne("driveX_Api.Models.File.Details", "Details")
                        .WithOne("Storage")
                        .HasForeignKey("driveX_Api.Models.File.Storage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");
                });

            modelBuilder.Entity("driveX_Api.Models.File.Details", b =>
                {
                    b.Navigation("SharedDetails");

                    b.Navigation("Storage")
                        .IsRequired();
                });

            modelBuilder.Entity("driveX_Api.Models.User.UserInfo", b =>
                {
                    b.Navigation("FileDetails");

                    b.Navigation("SharedDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
